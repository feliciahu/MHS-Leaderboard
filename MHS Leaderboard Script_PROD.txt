USE ROLE SBX_EA_GENERAL_FR;
USE DATABASE SBX_PSAS_DB;
USE SCHEMA ANALYTICS;
USE WAREHOUSE SBX_EA_GENERAL_FR_WH;


--SHOW TASKS LIKE 'TSK_PA_FY24_MHS_LEADERBOARD%'
--DESC TASK TSK_PA_FY24_MHS_LEADERBOARD
--select *  from table(SBX_PSAS_DB.INFORMATION_SCHEMA.task_history(
--scheduled_time_range_start=>dateadd('hour',-24,current_timestamp()),
--result_limit => 10,
--task_name=>'TSK_PA_FY24_MHS_LEADERBOARD'));
    
--alter task TSK_PA_FY24_MHS_LEADERBOARD resume; --It was by default suspended  ( run this command Only first time since by default its suspended)


--TASK
--CREATE OR REPLACE TASK TSK_PA_FY24_MHS_LEADERBOARD
--WAREHOUSE = SBX_EA_GENERAL_FR_WH
--SCHEDULE = 'USING CRON 0 17 * * * America/Los_Angeles'
--TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD HH24'
--AS


----baseline data----------------------------
--select top 10* FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC

--PULL MAX SALES DATE FOR ACTUALS
CREATE OR REPLACE TEMPORARY TABLE MAX_DATE AS
SELECT TO_CHAR(MAX(TO_DATE(PERIOD, 'YYYY-DD MON')), 'YYYY_DD MON') AS MAX_PERIOD
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC
WHERE TO_DATE(PERIOD, 'YYYY-DD MON') < (CURRENT_DATE() + INTERVAL '1 year');


--PULL MAX QUARTER DATE 
--CREATE OR REPLACE TEMPORARY TABLE MAX_QUARTER AS 
--SELECT MAX("QUARTER") MAX_QUARTER
--FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADDED_SOLUTIONS

--LOCATION ID
CREATE OR REPLACE TEMPORARY TABLE LOC AS
SELECT  LPAD(CUST_ACCT_ID,6,0) CUST_ACCT_ID, MAX(INA_LOC_ID) AS LOC_ID
FROM    PRD_PSAS_DB.RPT.T_LOCATION_MAP
WHERE   INA_LOC_ID IS NOT NULL 
AND CUST_ACCT_ID != '------' 
AND CUST_ACCT_ID != 'Messag'
AND CUST_ACCT_ID != 'PRD: a'
GROUP BY LPAD(CUST_ACCT_ID,6,0);

-- select * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC where period='2023-06 SEP'
-- select distinct period,month,year FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC group by 1,2,3
-----get the ## in set------------------------

--add product segment/ limit to net sales
CREATE OR REPLACE TEMPORARY TABLE NETSALESTABLE_prep AS
SELECT b.DEA_NUM, vpe.*
	      , CASE WHEN PRODUCTCATEGORYID = 'MPB' THEN 'MPB'
	      	WHEN vstx.COPA_DEPT_CD LIKE 'S%' THEN 'Specialty'
	       WHEN vstx.COPA_DEPT_CD LIKE 'R%' THEN  'Biosimlar'
	       WHEN em.RXDA_DSCR = 'OTC'  THEN 'OTC'
	       WHEN em.GNRC_IND = 'Y' THEN 'Generic RX'
	       ELSE 'Brand RX' END PRODUCTSEGMENT
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC vpe
--LEFT JOIN PRD_PSAS_DB.EDWRPT.DIM_ITEM_CURR dc ON CAST(vpe.ITEMNUMBER AS VARCHAR) = dc.EM_ITEM_NUM   
LEFT JOIN PRD_PSAS_DB.RPT.T_IW_EM_ITEM em ON CAST(vpe.ITEMNUMBER AS VARCHAR) = em.EM_ITEM_NUM
LEFT JOIN prd_psas_db.rpt.T_DM_VSTX_ITEM vstx ON CAST(vpe.ITEMNUMBER AS VARCHAR) = vstx.EM_ITEM_NUM
LEFT JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b ON vpe.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID) WHERE b.CUST_ACCT_ID != 'unk'
AND PRODUCTGROUPREVID = 'NET SALES' 
and (productcategoryid = 'PHARMA' OR PRODUCTCATEGORYID ='MPB') 
and productgroup ='NET SALES'
AND CONTAINS(ROLE, 'MHS'); 


--aggregate from line lever to productsegment level
CREATE OR REPLACE TEMPORARY TABLE NETSALESTABLE AS
SELECT  PAYEEID,
		PAYEENAME,
		ROLE,
        ROLENAME,
        ACCOUNTID,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD, 
        DEA_NUM,
        SUM(SALESAMOUNT) AS NET_SALES_ACTUAL, 
        PRODUCTSEGMENT,
	    CASE WHEN PRODUCTSEGMENT = 'MPB' THEN SUM(SALESAMOUNT) 
	    	 WHEN PRODUCTSEGMENT = 'Specialty' THEN SUM(SALESAMOUNT)
	         WHEN PRODUCTSEGMENT = 'Biosimlar' THEN SUM(SALESAMOUNT)
	         WHEN PRODUCTSEGMENT =  'OTC'  THEN SUM(SALESAMOUNT)
	         WHEN PRODUCTSEGMENT = 'Generic RX' THEN SUM(SALESAMOUNT)  
	         WHEN PRODUCTSEGMENT = 'Brand RX' THEN SUM(SALESAMOUNT) END SALES, 
	   to_varchar("__LOAD_TIMESTAMP__", 'yyyy-MM') AS loaded
FROM netsalestable_prep
WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE)
GROUP BY 
		PAYEEID,
		PAYEENAME,
        ROLE,
        ROLENAME,
        ACCOUNTID,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD, 
        PRODUCTSEGMENT,
        DEA_NUM,
        __LOAD_TIMESTAMP__;

-- SELECT MONTH,SUM(TARGETVALUE) FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_PAYEE_ACCOUNT_TARGETS" WHERE COMPPLAN LIKE '%EAE%'
-- GROUP BY 1;
-- SELECT TOP 10* FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_PAYEE_ACCOUNT_TARGETS"; 
       
--account goals 
CREATE OR REPLACE TEMPORARY TABLE account_targets AS 
SELECT 
	a.PAYEEID, 
	a.PAYEENAME, 
	a.ACCOUNTID, 
	a.COMPPLAN, 
	a.COMPPLANNAME,
	MONTH, 
	SUM(a.TARGETVALUE) AS TARGETGOAL,
    b.DEA_NUM
FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_PAYEE_ACCOUNT_TARGETS" a 
JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b
ON a.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID)
WHERE b.CUST_ACCT_ID != 'unk'
AND PRODUCTGROUP = 'NET SALES'
AND GOALTYPEID = 'ACCOUNT GOAL' 
GROUP BY  
	a.PAYEEID, 
	a.PAYEENAME,
	a.ACCOUNTID,
	a.MONTH, 
	a.COMPPLAN, 
	a.COMPPLANNAME,
    b.DEA_NUM;
 
-- SELECT TOP 10* FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_ACCOUNT_GOALS";
-- SELECT CALENDARMONTH,SUM(TARGETVALUE) FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_ACCOUNT_GOALS" 
-- WHERE PRODUCTGROUP = 'NET SALES' AND MARKETSEGMENT = 'MHS' GROUP BY 1;
 
----get goal info
CREATE OR REPLACE TEMPORARY TABLE account_goals AS 
SELECT 
	a.ACCOUNTID, 
    b.DEA_NUM,
	IFNULL(SUM(CASE WHEN a.PRODUCTIDENTIFIER = 'PHARMA' THEN TARGETVALUE END), 0) AS Pharma_Goal, 
	IFNULL(SUM(CASE WHEN a.PRODUCTIDENTIFIER = 'MPB' THEN TARGETVALUE END), 0 ) AS MPB_Goal,
	IFNULL(Pharma_Goal + MPB_Goal, 0) AS totalgoal,
	CASE 
		WHEN a.CALENDARMONTH = 'APRIL 2023' THEN '2024-01 APR'
		WHEN a.CALENDARMONTH = 'MAY 2023' THEN '2024-02 MAY'
		WHEN a.CALENDARMONTH = 'JUNE 2023' THEN '2024-03 JUN'
		WHEN a.CALENDARMONTH = 'JULY 2023' THEN '2024-04 JUL'
		WHEN a.CALENDARMONTH = 'AUGUST 2023' THEN '2024-05 AUG'
		WHEN a.CALENDARMONTH = 'SEPTEMBER 2023' THEN '2024-06 SEP'
		WHEN a.CALENDARMONTH = 'OCTOBER 2023' THEN '2024-07 OCT'
		WHEN a.CALENDARMONTH = 'NOVEMBER 2023' THEN '2024-08 NOV' 
		WHEN a.CALENDARMONTH = 'DECEMBER 2023' THEN '2024-09 DEC'
		WHEN a.CALENDARMONTH = 'JANUARY 2024' THEN '2024-10 JAN'
		WHEN a.CALENDARMONTH = 'FEBRUARY 2024' THEN '2024-11 FEB'
		WHEN a.CALENDARMONTH = 'MARCH 2024' THEN '2024-12 MAR'
	END PERIOD 
FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_ACCOUNT_GOALS" a
JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b ON a.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID) WHERE b.CUST_ACCT_ID != 'unk'
AND PRODUCTGROUP = 'NET SALES'  
AND MARKETSEGMENT = 'MHS'
GROUP BY ACCOUNTID, PERIOD, DEA_NUM; 


--combined
CREATE OR REPLACE TEMPORARY TABLE COMBINED_GOALS AS 
SELECT 
	a.payeeid, 
	a.payeename, 
	a.compplan AS ROLE, 
	a.COMPPLANNAME AS ROLENAME,
	a.accountid, 
    a.DEA_NUM,
	n.accountname, 
	n.state AS accountstate,
	b.period,
	totalgoal, 
	pharma_goal, 
	MPB_Goal, 
	targetgoal
FROM account_targets a
LEFT JOIN account_goals b ON a.accountid = b.accountid AND a.MONTH = b.period
LEFT JOIN DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO n ON a.accountid = n.accountid 
WHERE n.EFFECTIVE_END = '9998-12-31'
AND PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE);


--PULL ACTUALS
CREATE OR REPLACE TEMPORARY TABLE PREP_PREP AS
SELECT  
		PAYEEID,
        PAYEENAME,
		ROLE,
        ROLENAME,
        ACCOUNTID,
        DEA_NUM,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD,
        PRODUCTSEGMENT,
        NET_SALES_ACTUAL,
        SALES,
        0 AS pharma_goal, 
	    0 AS mpb_goal, 
	    0 AS totalgoal, 
	    0 AS targetgoal
FROM    NETSALESTABLE
UNION 
SELECT  
		PAYEEID,
        PAYEENAME,
        ROLE,
        ROLENAME,
        ACCOUNTID,
        DEA_NUM,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD,
        'GOALS' AS PRODUCTSEGMENT,
        0 AS NET_SALES_ACTUAL,
        0 AS SALES, 
	    IFNULL(pharma_goal, 0) AS pharma_goal, 
	    IFNULL(mpb_goal, 0) AS mpb_goal, 
	    IFNULL(totalgoal, 0) AS totalgoal, 
	    IFNULL(targetgoal, 0) AS targetgoal
FROM combined_goals; 
	


--PULL ACTUALS
CREATE OR REPLACE TEMPORARY TABLE PREP AS
SELECT  
	PAYEEID, 
	PAYEENAME, 
	CASE WHEN CONTAINS(ROLE, 'EAE') THEN 'EAE' 
    WHEN CONTAINS(ROLE, 'DEA') THEN 'DEA' 
    WHEN CONTAINS(ROLE, 'SM') THEN 'VPS'
    WHEN CONTAINS(ROLE, 'FSL') THEN 'FSL' ELSE 'NA' END AS ROLE, 
	ROLENAME, 
	ACCOUNTID, 
    DEA_NUM,
	ACCOUNTNAME, 
	ACCOUNTSTATE, 
	PERIOD, 
	PRODUCTSEGMENT, 
	SUM(NET_SALES_ACTUAL) AS NET_SALES_ACTUAL, 
	SUM(SALES) AS SALES, 
	SUM(PHARMA_GOAL) AS PHARMA_GOAL , 
	SUM(MPB_GOAL) AS MPB_GOAL, 
	SUM(TOTALGOAL) AS TOTALGOAL, 
	SUM(TARGETGOAL) AS TARGETGOAL
FROM PREP_PREP
GROUP BY 
	PRODUCTSEGMENT, 
	PAYEEID, 
	PAYEENAME, 
	ROLE, 
	ROLENAME, 
	ACCOUNTID, 
    DEA_NUM,
	ACCOUNTNAME, 
	ACCOUNTSTATE, 
	PERIOD;

--------------------

--AVPS & VPS to reps 
 
--CREATE OR REPLACE TEMPORARY TABLE AVPS_VPS AS  
--SELECT 
--	DISTINCT(REP_NAME), 
--	REP_ID, 
--	REP_ROLE_ID,
--	PERIOD,
--	VPS_ID, 
--	VPS_NAME, 
--	AVP_ID, 
--	AVP_NAME
--FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT 
--WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE);
--
--CREATE OR REPLACE TEMPORARY TABLE VPS AS 
--SELECT 
--	DISTINCT(VPS_NAME) AS REP_NAME, 
--	CASE WHEN VPS_ID = 'VPS NOT FOUND' THEN 0 ELSE VPS_ID END AS REP_ID, 
--	VPS_TITLE AS REP_ROLE_ID ,
--	PERIOD,
--	VPS_ID, 
--	VPS_NAME,
--	AVP_ID, 
--	AVP_NAME
--FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT 
--WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE);
--
--INSERT INTO AVPS_VPS 
--SELECT * 
--FROM VPS;
--
--CREATE OR REPLACE TEMPORARY TABLE AVP_VP_JOINED AS
--SELECT 
--	p.*, 
--	VPS_ID,
--	VPS_NAME, 
--	AVP_ID,
--	AVP_NAME
--FROM PREP p
--LEFT JOIN AVPS_VPS_REPS av ON p.PAYEEID = av.REP_ID AND p.period = av.period   

CREATE OR REPLACE TEMPORARY TABLE AVPS_VPS AS  
SELECT
	DISTINCT(REP_ID), 
	REP_NAME, 
	REP_TITLE, 
	CASE 
		WHEN VPS_ID IS NULL OR VPS_ID = 'VPS NOT FOUND' THEN 0 
		ELSE VPS_ID END AS "VPS_ID",    
	CASE   
		WHEN VPS_NAME = 'VPS NOT FOUND' OR VPS_ID IS NULL THEN 'VPS not found'
		ELSE VPS_NAME END AS "VPS", 

	CASE 
        WHEN REP_ID IN (23425,73265,78168,78298,83104,124438,175432,288827,291653) THEN 208036
        WHEN REP_ID IN (58238,153668,238552,245200,280262,296683) THEN 55902
        WHEN REP_ID IN (67544,122251,182704,258211,263597,305424,305444) THEN 271720 
        WHEN REP_ID IN (6537) THEN 6565
        WHEN VPS_ID IS NULL OR VPS_ID = 'VPS NOT FOUND' THEN 0 
		ELSE AVP_ID END AS "AVP_ID", 
   	CASE 
        WHEN REP_ID IN (23425,73265,78168,78298,83104,124438,175432,288827,291653) THEN 'Thorpe, Ginger'
        WHEN REP_ID IN (58238,153668,238552,245200,280262,296683) THEN 'Ehlert, David A.'
        WHEN REP_ID IN (67544,122251,182704,258211,263597,305424,305444) THEN 'Sangani, Roopa Arora' 
        WHEN REP_ID IN (6537) THEN 'Naughton, Christopher John'
        WHEN VPS_ID = 'VPS NOT FOUND' OR VPS_ID IS NULL THEN 'AVP not found'
		WHEN CONTAINS(AVP_NAME, 'Bresnahan') THEN 'Bresnahan, Leigh E.'
    	WHEN CONTAINS(AVP_NAME, 'Ehlert') THEN 'Ehlert, David A.' 
    	WHEN CONTAINS(AVP_NAME, 'McKeon') THEN 'McKeon, Richard J.'
    	ELSE AVP_NAME END AS "AVP", 
    PERIOD 
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT
WHERE REP_ROLE_ID LIKE '%MHS%' AND REP_ROLE_ID NOT IN ('USP_MHS_SE');


INSERT INTO AVPS_VPS  
SELECT 
	DISTINCT(VPS_ID) AS REP_ID, 
	VPS_NAME AS REP_NAME, 
	VPS_TITLE AS REP_ROLE_ID ,
	VPS_ID, 
	VPS_NAME,
	AVP_ID, 
	CASE 
		--WHEN VPS_ID = 'VPS NOT FOUND' OR VPS_ID IS NULL THEN 'More than one AVP' 
		WHEN CONTAINS(AVP_NAME, 'Bresnahan') THEN 'Bresnahan, Leigh E.'
    	WHEN CONTAINS(AVP_NAME, 'Ehlert') THEN 'Ehlert, David A.' 
    	WHEN CONTAINS(AVP_NAME, 'McKeon') THEN 'McKeon, Richard J.'
    	ELSE AVP_NAME END AS "AVP", 
	PERIOD
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT 
WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE)
AND VPS_NAME != 'VPS NOT FOUND'
AND REP_ROLE_ID LIKE '%MHS%' AND REP_ROLE_ID NOT IN ('USP_MHS_SE');

--CREATE OR REPLACE TEMPORARY TABLE AVP_VP_JOINED AS
--SELECT *
--FROM PREP p
--LEFT JOIN AVPS_VPS av ON p.PAYEEID = av.REP_ID AND p.period = av.period;  

--terr 
CREATE OR REPLACE TEMPORARY TABLE terr AS
SELECT 
	ACCOUNTID,
    b.DEA_NUM,
    TERRITORYID AS TERRITORY_ID,
    HOMEDCID AS HOME_DC_ID,
    CHAINID AS CHAIN_ID,
    STATE AS ACCOUNT_STATE  
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO vpe   
JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b ON vpe.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID) WHERE b.CUST_ACCT_ID != 'unk'
AND vpe.EFFECTIVE_END = '9998-12-31';


--PRESIDENTS CLUB 
CREATE OR REPLACE TEMPORARY TABLE HIERARCHY_PREP AS
SELECT DISTINCT V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID AS PAYEE_ID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID AS COMP_PLAN_ID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START AS EFFECTIVE_START,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START < '2023-04-01' AND V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START >= '2022-04-01' THEN 'Rising Star Eligible' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START <= '2023-04-01' THEN 'President Club Eligible'
                     ELSE '<12mo by end of FY' END AS Award_Eligible
FROM            DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
LEFT JOIN       DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT
ON              V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = V_PE_FILTER_DATA_NO_ACCT.REP_ID
AND             V_PE_FILTER_DATA_NO_ACCT.PERIOD < '2025 01 APR'
LEFT JOIN       DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS
ON              V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = V_PE_PAYEE_ACCOUNT_TARGETS.PAYEEID
WHERE           EFFECTIVE_END = '9998-12-31'
AND             CONTAINS(V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID,'USP_MHS')
GROUP BY        V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START < '2023-04-01' AND V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START >= '2022-04-01' THEN 'Rising Star Eligible' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START <= '2023-04-01' THEN 'President Club Eligible'
                     ELSE '<12mo by end of FY' END;

CREATE OR REPLACE TEMPORARY TABLE HIERARCHY AS
SELECT DISTINCT PAYEE_ID,
                Award_Eligible
FROM HIERARCHY_PREP
GROUP BY 1,2;

--INACTIVE REP
CREATE OR REPLACE TEMPORARY TABLE REP_DURATION AS
SELECT DISTINCT PAYEEID,
                COMPPLANID,
                EFFECTIVE_START,
                EFFECTIVE_END,
                RANK() OVER (PARTITION BY PAYEEID ORDER BY EFFECTIVE_END DESC) AS RANK
FROM            DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
WHERE           CONTAINS(COMPPLANID,'USP_MHS')
GROUP BY        PAYEEID,
                COMPPLANID,
                EFFECTIVE_START,
                EFFECTIVE_END;

CREATE OR REPLACE TEMPORARY TABLE INACTIVE AS
SELECT *, 'Y' AS INACTIVE
FROM            REP_DURATION
WHERE           RANK=1 
AND             EFFECTIVE_END<>'9998-12-31';


--add final details 
CREATE OR REPLACE TEMPORARY TABLE FINAL_FLUFF AS
SELECT
	PAYEEID, 
	PAYEENAME, 
	CASE WHEN PAYEENAME = 'Millrany, Benjamin' THEN 'DEA'
    ELSE ROLE END AS ROLE,
    CASE WHEN PAYEENAME = 'Millrany, Benjamin' THEN 'MHS Sales Enterprise Account Director C Class Commission Plan'
    ELSE ROLENAME END AS ROLENAME,
	a.ACCOUNTID, 
    a.DEA_NUM,
	a.ACCOUNTNAME, 
	ACCOUNTSTATE, 
	PERIOD, 
	PRODUCTSEGMENT, 
	NET_SALES_ACTUAL, 
	SALES, 
	PHARMA_GOAL, 
	MPB_GOAL, 
	TOTALGOAL, 
	TARGETGOAL,
	CASE 
		WHEN PERIOD = '2024-01 APR' THEN '2024, QUARTER 1'
	    WHEN PERIOD = '2024-02 MAY' THEN '2024, QUARTER 1'
		WHEN PERIOD = '2024-03 JUN' THEN '2024, QUARTER 1'
		WHEN PERIOD = '2024-04 JUL' THEN '2024, QUARTER 2'
		WHEN PERIOD = '2024-05 AUG' THEN '2024, QUARTER 2'
		WHEN PERIOD = '2024-06 SEP' THEN '2024, QUARTER 2'
		WHEN PERIOD = '2024-07 OCT' THEN '2024, QUARTER 3'
		WHEN PERIOD = '2024-08 NOV' THEN '2024, QUARTER 3' 
		WHEN PERIOD = '2024-09 DEC' THEN '2024, QUARTER 3'
		WHEN PERIOD = '2024-10 JAN' THEN '2024, QUARTER 4'
		WHEN PERIOD = '2024-11 FEB' THEN '2024, QUARTER 4'
		WHEN PERIOD = '2024-12 MAR' THEN '2024, QUARTER 4'
		END QUARTER , 
	    TERRITORY_ID, 
        HOME_DC_ID, 
        CHAIN_ID,
        ACCOUNT_STATE,
        LOC.LOC_ID  
FROM PREP a
LEFT JOIN terr ON a.accountid = terr.accountid
LEFT JOIN  LOC ON  a.accountid= LOC.CUST_ACCT_ID
WHERE ROLE != 'NA';



--NET SALES RANK
CREATE OR REPLACE TEMPORARY TABLE NS_RANK AS
SELECT      PAYEEID, 
            PayeeName,
            ROLE,
            ROLENAME,
            SUM(NET_SALES_ACTUAL) AS NET_SALES_ACTUAL,
            SUM(TOTALGOAL) AS NET_SALES_GOAL,
            SUM(ZEROIFNULL(NET_SALES_ACTUAL))/ SUM(NULLIFZERO(TOTALGOAL)) AS ATT_PERC,
            CASE 
                WHEN SUM(TOTALGOAL) = 0 THEN NULL
                ELSE RANK() OVER (PARTITION BY ROLE ORDER BY SUM(ZEROIFNULL(NET_SALES_ACTUAL)) / NULLIF(SUM(NULLIFZERO(TOTALGOAL)), 0) DESC NULLS LAST)
            END AS NET_SALES_RANK
FROM        FINAL_FLUFF
WHERE       PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE) 
GROUP BY    
            ROLE,
            PAYEEID,
            PAYEENAME,
            ROLENAME; 

          
--just the roles 
CREATE OR REPLACE TEMPORARY TABLE JUST_ROLES AS 
SELECT DISTINCT(PAYEEID), 
	PAYEENAME,
	ROLE
FROM FINAL_FLUFF; 

--------------------vbcogs----------------------------------- 

CREATE OR REPLACE TEMPORARY TABLE VBCOGS AS
SELECT  
	a.PAYEEID, 
	b.ROLE, 
	a.quarter, 
	a.amount,
		CASE WHEN AMOUNT >= 5000 AND ROLE IN ('EAE','DEA', 'FSL') THEN '115%'
		WHEN  AMOUNT >= 10000 AND ROLE = 'VPS' THEN '115%'
		WHEN  AMOUNT = 0 THEN '< 100%'
		ELSE '100%-114.99%' END AS VBCOGS_Attainment 
FROM JUST_ROLES b
LEFT JOIN DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PPS a ON b.PAYEEID = a.PAYEEID 
WHERE A.PRODUCTTYPE = 'RIGHT HAND LEDGER'
AND CONTAINS(a.QUARTER, '2024');



CREATE OR REPLACE TEMPORARY TABLE VBCOGS_FOR_RANK AS 
SELECT a.payeeid, 
	ROLE, 
	sum(AMOUNT) AS VBCOG
FROM JUST_ROLES b
LEFT JOIN DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PPS a ON a.PAYEEID = b.PAYEEID 
WHERE A.PRODUCTTYPE = 'RIGHT HAND LEDGER'
AND CONTAINS(a.QUARTER, '2024')
GROUP BY  
	a.PAYEEID, 
	ROLE;
	

--VBCOGS RANK
CREATE OR REPLACE TEMPORARY TABLE VBCOGS_RANK AS
SELECT      PAYEEID, 
            ROLE,
            (ZEROIFNULL(VBCOG)) AS TOTAL,
            DENSE_RANK() OVER (PARTITION BY ROLE ORDER BY (ZEROIFNULL(VBCOG)) DESC) AS VBCOGS_RANK
FROM VBCOGS_FOR_RANK
GROUP BY 	PAYEEID, 
			ROLE, 
			VBCOG;
		
--------------------vas-----------------------------------  
           
---VAS
CREATE OR REPLACE TEMPORARY TABLE VAS AS
SELECT 
	a.PAYEEID,
	ROLE,
	ACCOUNTID, 
	INITCAP(PRODUCTTYPE) PRODUCTTYPE, 
	CASE WHEN PRODUCTTYPE = 'HEALTH MART ATLAS' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'PROVIDERPAY' THEN 'Category 3'
	 WHEN PRODUCTTYPE = 'RXO UTILIZATION ANALYTICS' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO EPISODIC ADVISORY ENGAGEMENTS' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'RELAYHEALTH' THEN 'Category 3'
	 WHEN PRODUCTTYPE = 'PROVIDER SOLUTIONS (MSH)' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES - PAP RECOVERY NAVIGATOR' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MACRO HELIX' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES - PAP SERVICES' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'SUPPLYLOGIX' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'MCKESSON PLASMA & BIOLOGICS (MPB)' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES - REVENUE SERVICES' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MCKESSON PHARMACY SYSTEMS (MPS)' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'COMPASS' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES (PAP & REVENUE SERVICES)' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MRXTS - COVER MY MEDS' THEN 'Category 2'
	 WHEN PRODUCTTYPE= 'MRXTS - MACRO HELIX' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MRXTS - MCKESSON PHARMACY SYSTEMS (MPS)' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'MRXTS - RELAYHEALTH' THEN 'Category 3'
	--CASE WHEN PRODUCTYPE = 'RXO SPEND ANALYTICS' THEN 
	 WHEN PRODUCTTYPE = 'MRXTS – SUPPLYLOGIX' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'COVER MY MEDS' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'MCKESSON MEDICAL SURGICAL(MMS)' THEN 'Category 1'
	END AS CATEGORY, 
	FISCALQUARTER,
	CASE WHEN FISCALQUARTER = 'QUARTER 1 2024' THEN '2024, QUARTER 1'
	WHEN FISCALQUARTER = 'QUARTER 2 2024' THEN '2024, QUARTER 2'
	WHEN FISCALQUARTER = 'QUARTER 3 2024' THEN '2024, QUARTER 3'
    WHEN FISCALQUARTER = 'QUARTER 4 2024' THEN '2024, QUARTER 4'
	ELSE 'OLD' END AS QUARTER, 
		DEALCREDIT, 
	CASE WHEN CATEGORY = 'Category 1' THEN 60  
		WHEN CATEGORY = 'Category 2' THEN 30 
		WHEN CATEGORY = 'Category 3' THEN 10  
		END AS CATEGORY_POINTS, 
	DEALCREDIT * CATEGORY_POINTS AS VAS_POINTS
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADDED_SOLUTIONS b
INNER JOIN just_roles a ON b.payeeid = a.payeeid
WHERE CONTAINS(FISCALQUARTER, '2024'); 


---vas rank 
CREATE OR REPLACE TEMPORARY TABLE VAS_RANK AS
SELECT      PAYEEID, 
            ROLE,
            SUM(VAS_POINTS) AS VAS_TOTAL,
            DENSE_RANK() OVER (PARTITION BY ROLE ORDER BY SUM(ZEROIFNULL(VAS_POINTS)) DESC) AS VAS_RANK
FROM VAS
GROUP BY 	PAYEEID, 
            ROLE;
           
           
 ---------------------Renewals  
          
 --renewals 
CREATE OR REPLACE TEMPORARY TABLE RENEWALS AS  
SELECT 
	b.OPPORTUNITY_ID, 
	b.OPPORTUNITY_NAME,
	TO_NUMERIC(b.PAIDPAYEE) AS PAIDPAYEE, 
	b.PAIDPAYEENAME,
	b.PAYEETYPE, 
     CASE WHEN CLOSEDATE>='04/01/2023' AND CLOSEDATE<='04/30/2023' THEN '2024-01 APR'
          WHEN CLOSEDATE>='05/01/2023' AND CLOSEDATE<='05/31/2023' THEN '2024-02 MAY'
          WHEN CLOSEDATE>='06/01/2023' AND CLOSEDATE<='06/30/2023' THEN '2024-03 JUN'
          WHEN CLOSEDATE>='07/01/2023' AND CLOSEDATE<='07/31/2023' THEN '2024-04 JUL'
          WHEN CLOSEDATE>='08/01/2023' AND CLOSEDATE<='08/31/2023' THEN '2024-05 AUG'
          WHEN CLOSEDATE>='09/01/2023' AND CLOSEDATE<='09/30/2023' THEN '2024-06 SEP'
          WHEN CLOSEDATE>='10/01/2023' AND CLOSEDATE<='10/31/2023' THEN '2024-07 OCT'
          WHEN CLOSEDATE>='11/01/2023' AND CLOSEDATE<='11/30/2023' THEN '2024-08 NOV'
          WHEN CLOSEDATE>='12/01/2023' AND CLOSEDATE<='12/31/2023' THEN '2024-09 DEC'
          WHEN CLOSEDATE>='01/01/2024' AND CLOSEDATE<='01/31/2024' THEN '2024-10 JAN'
          WHEN CLOSEDATE>='02/01/2024' AND CLOSEDATE<='02/29/2024' THEN '2024-11 FEB'
          ELSE '2024-12 MAR'
          END AS CLOSE_PERIOD,
	-- b.splitpct, 
	b.revenue, 
	b.nettermgain, 
	b.ebitpercent / 100 AS ebitpercent, 
	b.currentebitpercent / 100 AS currentebitpercent, 
	b.dso, 
    --BASE PAYOUT
    CASE WHEN b.nettermgain<24 THEN 100
         WHEN b.nettermgain>=24 AND b.nettermgain<36 THEN 86
         WHEN b.nettermgain>=36 AND b.nettermgain<48 THEN 85
         WHEN b.nettermgain>=48 AND b.nettermgain<60 THEN 84
         WHEN b.nettermgain>=60 THEN 83
         ELSE 0 END AS TERM_THRESHOLD,
    currentebitpercent*TERM_THRESHOLD/100 AS EBIT_THRESHOLD,
    REVENUE*EBIT_THRESHOLD AS EBIT_DOLLARS,
    REVENUE*EBITPERCENT AS EBIT,
    CASE WHEN EBITPERCENT>=EBIT_THRESHOLD THEN .00625
         ELSE .00312 END AS BASE_PAYOUT_RATE,
    EBIT*BASE_PAYOUT_RATE AS BASE_PAYOUT,
    CASE WHEN b.nettermgain>=24 AND b.nettermgain<36 THEN -.33
         WHEN b.nettermgain>=36 AND b.nettermgain<48 THEN 0
         WHEN b.nettermgain>=48 AND b.nettermgain<60 THEN .5
         WHEN b.nettermgain>=60 THEN 1
         ELSE 0 END AS DEAL_MODIFIER,
    (BASE_PAYOUT+(BASE_PAYOUT*DEAL_MODIFIER)) AS MODIFIED_PAYOUT,
    --ACCELERATOR PAYOUT
    CASE WHEN EBITPERCENT<EBIT_THRESHOLD THEN 0
    ELSE .007 END AS ACCELERATOR_1,
    CASE WHEN EBITPERCENT>=currentebitpercent THEN .14
    ELSE 0 END AS ACCELERATOR_2,
    CASE WHEN ACCELERATOR_2>ACCELERATOR_1 THEN ACCELERATOR_2
    ELSE ACCELERATOR_1 END AS ACCELERATOR_APPLIED,
    CASE WHEN EBIT>EBIT_DOLLARS THEN (EBIT-EBIT_DOLLARS)
    ELSE 0 END AS EBIT_OVER_THRESHOLD,
    ACCELERATOR_APPLIED*EBIT_OVER_THRESHOLD AS ACCELERATOR_PAYOUT,
    --DSO MODIFIER
    CASE WHEN DSO>=17.5001 THEN -.005
    ELSE 0 END AS DSO_MODIFIER,
    DSO_MODIFIER*(ACCELERATOR_PAYOUT+MODIFIED_PAYOUT) AS DSO_REDUCTION,
    --FINAL PAYOUT
    (MODIFIED_PAYOUT+ACCELERATOR_PAYOUT+DSO_REDUCTION) AS ESTIMATED_PAYOUT
    
    
    -----------------------------OLD LOGIC---------------------------

	-- CASE WHEN CURRENTEBITPERCENT <> 0 THEN
 --        CASE 
 --            WHEN EBITPERCENT > CURRENTEBITPERCENT THEN ((EBITPERCENT/CURRENTEBITPERCENT) - 1)/ 10 + .10
 --            WHEN EBITPERCENT < (0.85*CURRENTEBITPERCENT) THEN ((EBITPERCENT/CURRENTEBITPERCENT) - 0.85)/ 10 + .10
 --            ELSE .10
 --          END
 --        ELSE .10 
 --    END AS EBITMODIFIER,
	-- CASE
	-- 	WHEN nettermgain < 23 THEN 0.01
	-- 	WHEN nettermgain < 26 THEN 0.02
	-- 	WHEN nettermgain < 48 THEN 0.03
	-- 	WHEN nettermgain < 60 THEN 0.04
	-- 	ELSE 0.05
	-- END AS TERMMODIFIER,
	-- CASE 
	-- 	WHEN DSO < 8 THEN 0.05 
	-- 	WHEN DSO < 14 THEN 0.036
	-- 	WHEN DSO < 20 THEN 0.022
	-- 	WHEN DSO < 33 THEN 0.008
	-- 	ELSE 0 
	-- END AS DSOMODIFIER, 
	-- revenue * (ebitpercent/100) AS RENEWAL_ANNUAL_EBIT, 
	-- (EBITMODIFIER * RENEWAL_ANNUAL_EBIT) / 10 AS EBIT_POINTS, 
	-- (TERMMODIFIER * RENEWAL_ANNUAL_EBIT) / 10 AS TERM_POINTS, 
	-- (DSOMODIFIER * RENEWAL_ANNUAL_EBIT) / 10 AS DSO_POINTS,
	-- EBIT_POINTS + TERM_POINTS + DSO_POINTS AS TOTAL_POINTS, 
	-- TOTAL_POINTS * SPLITPCT AS INDV_POINTS
FROM JUST_ROLES a          
INNER JOIN DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION b
WHERE COMPONENT_ID = 'CR ADVANCE PART I'
AND PAYEETYPE = 'REP' 
AND ACCOUNTTYPE = 'HEALTH SYSTEMS'
AND SIGNINGTYPE = 'RENEWAL'
-- AND REPORTPERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE)
AND (CONTAINS(CLOSEDATE, '2023') OR CONTAINS(CLOSEDATE, '2024'))
AND CLOSEDATE>='04/01/2023'
GROUP BY 
	b.OPPORTUNITY_ID, 
	b.OPPORTUNITY_NAME,
	PAIDPAYEE, 
	b.PAIDPAYEENAME,
	b.PAYEETYPE, 
    CLOSE_PERIOD,
	-- b.splitpct, 
	b.revenue, 
	b.nettermgain, 
	b.ebitpercent, 
	b.currentebitpercent, 
	b.dso;
	-- EBITMODIFIER, 
	-- TERMMODIFIER, 
	-- DSOMODIFIER; 

--renewal rank prep 
CREATE OR REPLACE TEMPORARY TABLE RENEWAL_RANK_PREP AS
SELECT a.*, b.role 
FROM RENEWALS a
INNER JOIN FINAL_FLUFF b ON a.PAIDPAYEENAME = b.PAYEENAME AND a.CLOSE_PERIOD = b.PERIOD 
GROUP BY a.OPPORTUNITY_ID,
	a.OPPORTUNITY_NAME,
	a.PAIDPAYEE, 
	a.PAIDPAYEENAME,
	a.PAYEETYPE, 
	a.CLOSE_PERIOD,
	-- a.splitpct, 
	a.revenue, 
	a.nettermgain, 
	a.ebitpercent, 
	a.currentebitpercent, 
	a.dso,
    A.TERM_THRESHOLD,
    A.EBIT_THRESHOLD,
    A.EBIT_DOLLARS,
    A.EBIT,
    A.BASE_PAYOUT_RATE,
    A.BASE_PAYOUT,
    A.DEAL_MODIFIER,
    A.MODIFIED_PAYOUT,
    A.ACCELERATOR_1,
    A.ACCELERATOR_2,
    A.ACCELERATOR_APPLIED,
    A.EBIT_OVER_THRESHOLD,
    A.ACCELERATOR_PAYOUT,
    A.DSO_MODIFIER,
    A.DSO_REDUCTION,
    A.ESTIMATED_PAYOUT,
-- 	a.EBITMODIFIER, 
-- 	a.TERMMODIFIER, 
-- 	a.DSOMODIFIER, 
-- 	a.RENEWAL_ANNUAL_EBIT, 
-- 	a.EBIT_POINTS, 
-- 	a.TERM_POINTS, 
-- 	a.DSO_POINTS, 
--  a.TOTAL_POINTS, 
--  a.INDV_POINTS,
b.role; 

--renewal rank 
CREATE OR REPLACE TEMPORARY TABLE RENEWAL_RANK AS
SELECT      PAIDPAYEE, 
            PAIDPAYEENAME,
            ROLE,
            SUM(ESTIMATED_PAYOUT) AS RENEWAL_TOTAL,
            DENSE_RANK() OVER (PARTITION BY ROLE ORDER BY SUM(ZEROIFNULL(ESTIMATED_PAYOUT)) DESC) AS REN_RANK
FROM RENEWAL_RANK_PREP
GROUP BY 	PAIDPAYEE, 
            PAIDPAYEENAME,
            ROLE;

--CUSTOMER TYPE
CREATE OR REPLACE TEMPORARY TABLE CUSTOMER_TYPE AS
SELECT DISTINCT accountid,
customertypecode,
CASE WHEN customertypecode=1 THEN 'RETAIL DRUG STORE'
     WHEN customertypecode=2 THEN 'DRUG CHAIN'
     WHEN customertypecode=7 THEN 'HOSPITAL (INDIVIDUAL)'
     WHEN customertypecode=8 THEN 'HOSPITAL CHAIN'
     WHEN customertypecode=9 THEN 'HOSPITAL GROUP'
     WHEN customertypecode=10 THEN 'PHYSICIAN/DENTIST'
     WHEN customertypecode=14 THEN 'NON-ORDER CUSTOMER'
     WHEN customertypecode=16 THEN 'HMO PHARMACY (NON-HOSP)'
     WHEN customertypecode=19 THEN 'INTERNAL SALES'
     WHEN customertypecode=20 THEN 'MCKESSON DC'
     WHEN customertypecode=26 THEN 'MAIL ORDER FACILITY'
     WHEN customertypecode=27 THEN 'CLOSED PHARMACY'
     WHEN customertypecode=30 THEN 'HOSPICES'
     WHEN customertypecode=32 THEN 'SURGICENTERS'
     WHEN customertypecode=33 THEN 'EMERGENCY CARE CENTERS'
     WHEN customertypecode=38 THEN 'FED HOSPITAL NON-MILITAR'
     WHEN customertypecode=43 THEN 'COUNTY HOSPITAL'
     WHEN customertypecode=44 THEN 'CITY CORRECT INSTITUTE'
     WHEN customertypecode=46 THEN 'UNIVERSITY HOSPITAL'
     WHEN customertypecode=47 THEN 'HOME IV THERAPY'
     WHEN customertypecode=48 THEN 'ONCOLOGY CENTERS'
     ELSE '' END AS CUSTOMER_TYPE
from DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO
where effective_end='9998-12-31'
group by 1,2,3;

--COMMON GROUP
CREATE OR REPLACE TEMPORARY TABLE COMMON_GROUP AS
SELECT DISTINCT CUST_ACCT_ID, COMMON_GRP_ID,COMMON_GRP_NAME
FROM PRD_PSAS_DB.EDWRPT.DIM_CUST_ACCT_CURR;
           
 ---------------------final pull 
                
 --FILTER DATA  
CREATE OR REPLACE TABLE SBX_PSAS_DB.ANALYTICS.FY24_MHS_LEADERBOARD_FILTER AS 
SELECT *
FROM AVPS_VPS
WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE);


--NET SALES & RANKS
CREATE OR REPLACE TABLE SBX_PSAS_DB.ANALYTICS.FY24_MHS_LEADERBOARD AS
SELECT      a.*,
            NS_RANK.NET_SALES_RANK, 
            IFNULL(TO_VARCHAR(VBCOGS_RANK.VBCOGS_RANK), 9999) AS VBCOGS_RANK, 
            IFNULL(TO_VARCHAR(VAS_RANK.VAS_RANK), 9999) AS VAS_RANK, 
            IFNULL(TO_VARCHAR(RENEWAL_RANK.REN_RANK), 9999) AS VREN_RANK, 
            CASE WHEN QUARTER = '2024, QUARTER 1' THEN 'Q1'
            	WHEN QUARTER = '2024, QUARTER 2' THEN 'Q2'
            	WHEN QUARTER = '2024 QUARTER 3' THEN 'Q3'
            	WHEN QUARTER = '2024, QUARTER 4' THEN 'Q4' END AS Q,
            CASE WHEN B.Award_Eligible IS NULL THEN '<12mo by end of FY'
            ELSE B.Award_Eligible END AS Award_Eligible,
            n.Customer_Type,
            CASE WHEN I.INACTIVE IS NULL THEN ''
            ELSE I.INACTIVE END AS INACTIVE,
            CAST(GETDATE() AS Date) AS REFRESH_DATE,
            CASE WHEN CG.COMMON_GRP_ID='' THEN 'OTHER'
            ELSE CG.COMMON_GRP_ID END AS COMMON_GRP_ID,
            CASE WHEN CG.COMMON_GRP_NAME='' THEN 'OTHER'
            ELSE CG.COMMON_GRP_NAME END AS COMMON_GRP_NAME
FROM        final_fluff a
LEFT JOIN   NS_RANK
ON          a.PAYEEID = NS_RANK.PAYEEID
AND         a.ROLE = NS_RANK.ROLE 
LEFT JOIN VBCOGS_RANK 
ON          a.PAYEEID = VBCOGS_RANK .PAYEEID
AND         a.ROLE = VBCOGS_RANK.ROLE
LEFT JOIN VAS_RANK 
ON          a.PAYEEID = VAS_RANK.PAYEEID
AND         a.ROLE = VAS_RANK.ROLE
LEFT JOIN RENEWAL_RANK 
ON a.PAYEEID = RENEWAL_RANK.PAIDPAYEE 
AND a.ROLE = RENEWAL_RANK.ROLE
LEFT JOIN HIERARCHY B
ON a.PAYEEID = B.PAYEE_ID
LEFT JOIN INACTIVE I
ON a.PAYEEID = I.PAYEEID
LEFT JOIN CUSTOMER_TYPE n 
ON a.accountid = n.accountid
LEFT JOIN COMMON_GROUP CG
ON A.ACCOUNTID = CG.CUST_ACCT_ID
WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE);


--VBCOGS 
CREATE OR REPLACE TABLE SBX_PSAS_DB.ANALYTICS.FY24_MHS_LEADERBOARD_VBCOGS AS 
SELECT *
FROM VBCOGS;

--VAS 
CREATE OR REPLACE TABLE SBX_PSAS_DB.ANALYTICS.FY24_MHS_LEADERBOARD_VAS AS 
SELECT * 
FROM VAS;

--RENEWAL 
CREATE OR REPLACE TABLE SBX_PSAS_DB.ANALYTICS.FY24_MHS_LEADERBOARD_REN AS 
SELECT a.*, 
	TO_NUMERIC(PAIDPAYEE) AS PAYEEID
FROM RENEWALS a;
--LEFT JOIN SBX_PSAS_DB.ANALYTICS.FY23_MHS_LEADERBOARD_FILTER b 
--ON a.PAIDPAYEENAME = b.REP_NAME AND a.REPORTPERIOD = b.PERIOD 
-- WHERE REPORTPERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE);


-- SELECT * FROM SBX_PSAS_DB.ANALYTICS.FY24_MHS_LEADERBOARD WHERE PAYEENAME LIKE '%Karin%'