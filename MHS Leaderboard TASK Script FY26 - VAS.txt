USE ROLE SBX_EA_GENERAL_FR;
USE DATABASE SBX_PSAS_DB;
USE SCHEMA SALES_OPS_GOV;
USE WAREHOUSE SBX_EA_GENERAL_FR_WH;

--SHOW TASKS LIKE 'TSK_FELICIA_H_FY26_MHS_LEADERBOARD_VAS%'
--DESC TASK TSK_FELICIA_H_FY26_MHS_LEADERBOARD_VAS
select *  from table(SBX_PSAS_DB.INFORMATION_SCHEMA.task_history(
scheduled_time_range_start=>dateadd('hour',-24,current_timestamp()),
result_limit => 10,
task_name=>'TSK_FELICIA_H_FY26_MHS_LEADERBOARD_VAS'));
    
--alter task TSK_FELICIA_H_FY26_MHS_LEADERBOARD_VAS resume; --It was by default suspended  ( run this command Only first time since by default its suspended)
-- execute task TSK_FELICIA_H_FY26_MHS_LEADERBOARD_VAS;


--TASK
CREATE OR REPLACE TASK TSK_FELICIA_H_FY26_MHS_LEADERBOARD_VAS
WAREHOUSE = SBX_EA_GENERAL_FR_WH
SCHEDULE = 'USING CRON 30 6 * * 0-6 America/Chicago' -- 6:30 AM on weekdays
TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD HH24'
AS

CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.FY26_MHS_LEADERBOARD_VAS AS
----baseline data----------------------------
--select sum(SALESAMOUNT) FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC where PERIOD in ('2025-06 SEP','2025-05 AUG','2025-04 JUL')

WITH
--PULL MAX SALES DATE FOR ACTUALS
-- CREATE OR REPLACE TEMPORARY TABLE 
MAX_DATE AS (
SELECT TO_CHAR(MAX(TO_DATE(PERIOD, 'YYYY-DD MON')), 'YYYY_DD MON') AS MAX_PERIOD
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC
WHERE TO_DATE(PERIOD, 'YYYY-DD MON') < (CURRENT_DATE() + INTERVAL '1 year')
),

--PULL MAX QUARTER DATE 
--CREATE OR REPLACE TEMPORARY TABLE MAX_QUARTER AS 
--SELECT MAX("QUARTER") MAX_QUARTER
--FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADDED_SOLUTIONS

--LOCATION ID
-- CREATE OR REPLACE TEMPORARY TABLE 
LOC AS (
SELECT  LPAD(CUST_ACCT_ID,6,0) CUST_ACCT_ID, MAX(INA_LOC_ID) AS LOC_ID
FROM    PRD_PSAS_DB.RPT.T_LOCATION_MAP
WHERE   INA_LOC_ID IS NOT NULL 
AND CUST_ACCT_ID != '------' 
AND CUST_ACCT_ID != 'Messag'
AND CUST_ACCT_ID != 'PRD: a'
GROUP BY LPAD(CUST_ACCT_ID,6,0)
),

-- select TOP 100* FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC where accountid='937703' AND PERIOD='2025-10 JAN'
-- select distinct period,month,year FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC group by 1,2,3
-----get the ## in set------------------------


--add product segment/ limit to net sales
-- CREATE OR REPLACE TEMPORARY TABLE 
NETSALESTABLE_prep AS (
SELECT b.DEA_NUM, vpe.*
	      , CASE WHEN PRODUCTCATEGORYID = 'MPB' THEN 'MPB'
	      	WHEN vstx.COPA_DEPT_CD LIKE 'S%' THEN 'Specialty'
	       WHEN vstx.COPA_DEPT_CD LIKE 'R%' THEN  'Biosimlar'
	       WHEN em.RXDA_DSCR = 'OTC'  THEN 'OTC'
	       WHEN em.GNRC_IND = 'Y' THEN 'Generic RX'
	       ELSE 'Brand RX' END PRODUCTSEGMENT
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_NET_SALES_GENERIC vpe
--LEFT JOIN PRD_PSAS_DB.EDWRPT.DIM_ITEM_CURR dc ON CAST(vpe.ITEMNUMBER AS VARCHAR) = dc.EM_ITEM_NUM   
LEFT JOIN PRD_PSAS_DB.RPT.T_IW_EM_ITEM em ON CAST(vpe.ITEMNUMBER AS VARCHAR) = em.EM_ITEM_NUM
LEFT JOIN prd_psas_db.rpt.T_DM_VSTX_ITEM vstx ON CAST(vpe.ITEMNUMBER AS VARCHAR) = vstx.EM_ITEM_NUM
LEFT JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b ON vpe.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID) WHERE b.CUST_ACCT_ID != 'unk'
AND PRODUCTGROUPREVID = 'NET SALES' 
and (productcategoryid = 'PHARMA' OR PRODUCTCATEGORYID ='MPB') 
and productgroup ='NET SALES'
AND CONTAINS(ROLE, 'MHS')
),


--aggregate from line lever to productsegment level
-- CREATE OR REPLACE TEMPORARY TABLE 
NETSALESTABLE AS (
SELECT  PAYEEID,
		PAYEENAME,
		ROLE,
        ROLENAME,
        ACCOUNTID,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD, 
        DEA_NUM,
        SUM(SALESAMOUNT) AS NET_SALES_ACTUAL, 
        PRODUCTSEGMENT,
	    CASE WHEN PRODUCTSEGMENT = 'MPB' THEN SUM(SALESAMOUNT) 
	    	 WHEN PRODUCTSEGMENT = 'Specialty' THEN SUM(SALESAMOUNT)
	         WHEN PRODUCTSEGMENT = 'Biosimlar' THEN SUM(SALESAMOUNT)
	         WHEN PRODUCTSEGMENT =  'OTC'  THEN SUM(SALESAMOUNT)
	         WHEN PRODUCTSEGMENT = 'Generic RX' THEN SUM(SALESAMOUNT)  
	         WHEN PRODUCTSEGMENT = 'Brand RX' THEN SUM(SALESAMOUNT) END SALES, 
	   to_varchar("__LOAD_TIMESTAMP__", 'yyyy-MM') AS loaded
FROM netsalestable_prep
WHERE PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE)
GROUP BY 
		PAYEEID,
		PAYEENAME,
        ROLE,
        ROLENAME,
        ACCOUNTID,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD, 
        PRODUCTSEGMENT,
        DEA_NUM,
        __LOAD_TIMESTAMP__
),

--validate targets table        
-- SELECT MONTH,SUM(TARGETVALUE) FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_PAYEE_ACCOUNT_TARGETS" WHERE COMPPLAN LIKE '%EAE%' GROUP BY 1;
-- SELECT * FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_PAYEE_ACCOUNT_TARGETS" WHERE PAYEENAME LIKE '%Samantha Louise%'; 
      
--account goals 
-- CREATE OR REPLACE TEMPORARY TABLE 
account_targets AS (
SELECT 
	a.PAYEEID, 
	a.PAYEENAME, 
	a.ACCOUNTID, 
	a.COMPPLAN, 
	a.COMPPLANNAME,
	MONTH, 
	SUM(a.TARGETVALUE) AS TARGETGOAL,
    b.DEA_NUM
FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_PAYEE_ACCOUNT_TARGETS" a 
JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b
ON a.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID)
WHERE b.CUST_ACCT_ID != 'unk'
AND PRODUCTGROUP = 'NET SALES'
AND GOALTYPEID = 'ACCOUNT GOAL' 
GROUP BY  
	a.PAYEEID, 
	a.PAYEENAME,
	a.ACCOUNTID,
	a.MONTH, 
	a.COMPPLAN, 
	a.COMPPLANNAME,
    b.DEA_NUM
),
 
-- SELECT distinct CALENDARMONTH FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_ACCOUNT_GOALS" WHERE PAYEENAME LIKE '%Saman%';
--validate goals table
-- SELECT CALENDARMONTH,SUM(TARGETVALUE) FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_ACCOUNT_GOALS" WHERE PRODUCTGROUP = 'NET SALES' AND MARKETSEGMENT = 'MHS' GROUP BY 1;

----get goal info
-- CREATE OR REPLACE TEMPORARY TABLE 
account_goals AS (
SELECT 
	a.ACCOUNTID, 
    b.DEA_NUM,
	IFNULL(SUM(CASE WHEN a.PRODUCTIDENTIFIER = 'PHARMA' THEN TARGETVALUE END), 0) AS Pharma_Goal, 
	IFNULL(SUM(CASE WHEN a.PRODUCTIDENTIFIER = 'MPB' THEN TARGETVALUE END), 0 ) AS MPB_Goal,
	IFNULL(Pharma_Goal + MPB_Goal, 0) AS totalgoal,
	CASE 
		WHEN a.CALENDARMONTH = 'APRIL 2025' THEN '2026-01 APR'
		WHEN a.CALENDARMONTH = 'MAY 2025' THEN '2026-02 MAY'
		WHEN a.CALENDARMONTH = 'JUNE 2025' THEN '2026-03 JUN'
		WHEN a.CALENDARMONTH = 'JULY 2025' THEN '2026-04 JUL'
		WHEN a.CALENDARMONTH = 'AUGUST 2025' THEN '2026-05 AUG'
		WHEN a.CALENDARMONTH = 'SEPTEMBER 2025' THEN '2026-06 SEP'
		WHEN a.CALENDARMONTH = 'OCTOBER 2025' THEN '2026-07 OCT'
		WHEN a.CALENDARMONTH = 'NOVEMBER 2025' THEN '2026-08 NOV' 
		WHEN a.CALENDARMONTH = 'DECEMBER 2025' THEN '2026-09 DEC'
		WHEN a.CALENDARMONTH = 'JANUARY 2026' THEN '2026-10 JAN'
		WHEN a.CALENDARMONTH = 'FEBRUARY 2026' THEN '2026-11 FEB'
		WHEN a.CALENDARMONTH = 'MARCH 2026' THEN '2026-12 MAR'
	END PERIOD 
FROM "DEV_ENT_PL_DATALAKE_DB"."VARICENT"."V_PE_ACCOUNT_GOALS" a
JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b ON a.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID) WHERE b.CUST_ACCT_ID != 'unk'
AND PRODUCTGROUP = 'NET SALES'  
AND MARKETSEGMENT = 'MHS'
GROUP BY ACCOUNTID, PERIOD, DEA_NUM
),



--combined
-- CREATE OR REPLACE TEMPORARY TABLE 
COMBINED_GOALS AS (
SELECT
	a.payeeid, 
	a.payeename, 
	a.compplan AS ROLE, 
	a.COMPPLANNAME AS ROLENAME,
	a.accountid, 
    a.DEA_NUM,
	n.accountname, 
	n.state AS accountstate,
	b.period,
	totalgoal, 
	pharma_goal, 
	MPB_Goal, 
	targetgoal
FROM account_targets a
LEFT JOIN account_goals b ON a.accountid = b.accountid AND a.MONTH = b.period
LEFT JOIN DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO n ON a.accountid = n.accountid 
WHERE n.EFFECTIVE_END = '9998-12-31'
AND PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE)
),

--SELECT TOP 10* FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO

--PULL ACTUALS
-- CREATE OR REPLACE TEMPORARY TABLE 
PREP_PREP AS (
SELECT  
		PAYEEID,
        PAYEENAME,
		ROLE,
        ROLENAME,
        ACCOUNTID,
        DEA_NUM,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD,
        PRODUCTSEGMENT,
        NET_SALES_ACTUAL,
        SALES,
        0 AS pharma_goal, 
	    0 AS mpb_goal, 
	    0 AS totalgoal, 
	    0 AS targetgoal
FROM    NETSALESTABLE
UNION 
SELECT  
		PAYEEID,
        PAYEENAME,
        ROLE,
        ROLENAME,
        ACCOUNTID,
        DEA_NUM,
        ACCOUNTNAME,
        ACCOUNTSTATE,
        PERIOD,
        'GOALS' AS PRODUCTSEGMENT,
        0 AS NET_SALES_ACTUAL,
        0 AS SALES, 
	    IFNULL(pharma_goal, 0) AS pharma_goal, 
	    IFNULL(mpb_goal, 0) AS mpb_goal, 
	    IFNULL(totalgoal, 0) AS totalgoal, 
	    IFNULL(targetgoal, 0) AS targetgoal
FROM combined_goals
),

	
--PULL ACTUALS
-- CREATE OR REPLACE TEMPORARY TABLE 
PREP AS (
SELECT  
	PAYEEID, 
	PAYEENAME, 
	CASE WHEN CONTAINS(ROLE, 'EAE') THEN 'EAE' 
    WHEN CONTAINS(ROLE, 'DEA') THEN 'DEA' 
    WHEN CONTAINS(ROLE, 'SM') THEN 'VPS'
    WHEN CONTAINS(ROLE, 'FSL') THEN 'FSL' ELSE 'NA' END AS ROLE, 
	ROLENAME, 
	ACCOUNTID, 
    DEA_NUM,
	ACCOUNTNAME, 
	ACCOUNTSTATE, 
	PERIOD, 
	PRODUCTSEGMENT, 
	SUM(NET_SALES_ACTUAL) AS NET_SALES_ACTUAL, 
	SUM(SALES) AS SALES, 
	SUM(PHARMA_GOAL) AS PHARMA_GOAL , 
	SUM(MPB_GOAL) AS MPB_GOAL, 
	SUM(TOTALGOAL) AS TOTALGOAL, 
	SUM(TARGETGOAL) AS TARGETGOAL
FROM PREP_PREP
GROUP BY 
	PRODUCTSEGMENT, 
	PAYEEID, 
	PAYEENAME, 
	ROLE, 
	ROLENAME, 
	ACCOUNTID, 
    DEA_NUM,
	ACCOUNTNAME, 
	ACCOUNTSTATE, 
	PERIOD
),


--terr 
-- CREATE OR REPLACE TEMPORARY TABLE 
terr AS (
SELECT 
	ACCOUNTID,
    b.DEA_NUM,
    TERRITORYID AS TERRITORY_ID,
    HOMEDCID AS HOME_DC_ID,
    CHAINID AS CHAIN_ID,
    STATE AS ACCOUNT_STATE  
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO vpe   
JOIN "PRD_PSAS_DB"."RPT"."DIM_CUST_ACCT_CURR" b ON vpe.ACCOUNTID = TRY_TO_NUMBER(b.CUST_ACCT_ID) WHERE b.CUST_ACCT_ID != 'unk'
AND vpe.EFFECTIVE_END = '9998-12-31'
),


--PRESIDENTS CLUB 
-- CREATE OR REPLACE TEMPORARY TABLE 
HIERARCHY_PREP AS (
SELECT DISTINCT V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID AS PAYEE_ID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID AS COMP_PLAN_ID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START AS EFFECTIVE_START,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START < '2025-04-01' AND V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START >= '2024-04-01' THEN 'Rising Star Eligible' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START <= '2025-04-01' THEN 'President Club Eligible'
                     ELSE '<12mo by end of FY' END AS Award_Eligible
FROM            DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
LEFT JOIN       DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT
ON              V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = V_PE_FILTER_DATA_NO_ACCT.REP_ID
AND             V_PE_FILTER_DATA_NO_ACCT.PERIOD < '2027 01 APR'
LEFT JOIN       DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS
ON              V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = V_PE_PAYEE_ACCOUNT_TARGETS.PAYEEID
WHERE           EFFECTIVE_END = '9998-12-31'
AND             CONTAINS(V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID,'USP_MHS')
GROUP BY        V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START < '2025-04-01' AND V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START >= '2024-04-01' THEN 'Rising Star Eligible' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START <= '2025-04-01' THEN 'President Club Eligible'
                     ELSE '<12mo by end of FY' END
),

-- CREATE OR REPLACE TEMPORARY TABLE 
HIERARCHY AS (
SELECT DISTINCT PAYEE_ID,
                Award_Eligible
FROM HIERARCHY_PREP
GROUP BY 1,2
),

--INACTIVE REP
-- CREATE OR REPLACE TEMPORARY TABLE 
REP_DURATION AS (
SELECT DISTINCT PAYEEID,
                COMPPLANID,
                EFFECTIVE_START,
                EFFECTIVE_END,
                RANK() OVER (PARTITION BY PAYEEID ORDER BY EFFECTIVE_END DESC) AS RANK
FROM            DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
WHERE           CONTAINS(COMPPLANID,'USP_MHS')
GROUP BY        PAYEEID,
                COMPPLANID,
                EFFECTIVE_START,
                EFFECTIVE_END
),

-- CREATE OR REPLACE TEMPORARY TABLE 
INACTIVE AS (
SELECT *, 'Y' AS INACTIVE
FROM            REP_DURATION
WHERE           RANK=1 
AND             EFFECTIVE_END<>'9998-12-31'
),


--add final details 
-- CREATE OR REPLACE TEMPORARY TABLE 
FINAL_FLUFF AS (
SELECT
	cast(PAYEEID as int) "PAYEEID", 
	PAYEENAME, 
	CASE WHEN PAYEENAME = 'Millrany, Benjamin' THEN 'DEA'
    ELSE ROLE END AS ROLE,
    CASE WHEN PAYEENAME = 'Millrany, Benjamin' THEN 'MHS Sales Enterprise Account Director C Class Commission Plan'
    ELSE ROLENAME END AS ROLENAME,
	cast(a.ACCOUNTID as int) "ACCOUNTID", 
    a.DEA_NUM,
	a.ACCOUNTNAME, 
	ACCOUNTSTATE, 
	PERIOD, 
	PRODUCTSEGMENT, 
	NET_SALES_ACTUAL, 
	SALES, 
	PHARMA_GOAL, 
	MPB_GOAL, 
	TOTALGOAL, 
	TARGETGOAL,
	CASE 
		WHEN PERIOD = '2026-01 APR' THEN '2026, QUARTER 1'
	    WHEN PERIOD = '2026-02 MAY' THEN '2026, QUARTER 1'
		WHEN PERIOD = '2026-03 JUN' THEN '2026, QUARTER 1'
		WHEN PERIOD = '2026-04 JUL' THEN '2026, QUARTER 2'
		WHEN PERIOD = '2026-05 AUG' THEN '2026, QUARTER 2'
		WHEN PERIOD = '2026-06 SEP' THEN '2026, QUARTER 2'
		WHEN PERIOD = '2026-07 OCT' THEN '2026, QUARTER 3'
		WHEN PERIOD = '2026-08 NOV' THEN '2026, QUARTER 3' 
		WHEN PERIOD = '2026-09 DEC' THEN '2026, QUARTER 3'
		WHEN PERIOD = '2026-10 JAN' THEN '2026, QUARTER 4'
		WHEN PERIOD = '2026-11 FEB' THEN '2026, QUARTER 4'
		WHEN PERIOD = '2026-12 MAR' THEN '2026, QUARTER 4'
		END QUARTER , 
	    TERRITORY_ID, 
        HOME_DC_ID, 
        CHAIN_ID,
        ACCOUNT_STATE,
        LOC.LOC_ID  
FROM PREP a
LEFT JOIN terr ON a.accountid = terr.accountid
LEFT JOIN  LOC ON  a.accountid= LOC.CUST_ACCT_ID
WHERE ROLE != 'NA'
),


          

--just the roles 
-- CREATE OR REPLACE TEMPORARY TABLE 
JUST_ROLES AS (
SELECT DISTINCT(PAYEEID), 
	PAYEENAME,
	ROLE
FROM FINAL_FLUFF
),

		
--------------------vas-----------------------------------  
           
---VAS
-- CREATE OR REPLACE TEMPORARY TABLE 
VAS AS (
SELECT 
	a.PAYEEID,
	ROLE,
	ACCOUNTID, 
	INITCAP(PRODUCTTYPE) PRODUCTTYPE, 
	CASE WHEN PRODUCTTYPE = 'HEALTH MART ATLAS' THEN 'Category 3'
	 WHEN PRODUCTTYPE = 'PROVIDERPAY' THEN 'Category 3'
	 WHEN PRODUCTTYPE = 'RXO UTILIZATION ANALYTICS' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO EPISODIC ADVISORY ENGAGEMENTS' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'RELAYHEALTH' THEN 'Category 3'
	 WHEN PRODUCTTYPE = 'PROVIDER SOLUTIONS (MSH)' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES - PAP RECOVERY NAVIGATOR' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MACRO HELIX' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES - PAP SERVICES' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'SUPPLYLOGIX' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'MCKESSON PLASMA & BIOLOGICS (MPB)' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES - REVENUE SERVICES' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MCKESSON PHARMACY SYSTEMS (MPS)' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'COMPASS' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'RXO RECOVERY SERVICES (PAP & REVENUE SERVICES)' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MRXTS - COVER MY MEDS' THEN 'Category 2'
	 WHEN PRODUCTTYPE= 'MRXTS - MACRO HELIX' THEN 'Category 1'
	 WHEN PRODUCTTYPE = 'MRXTS - MCKESSON PHARMACY SYSTEMS (MPS)' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'MRXTS - RELAYHEALTH' THEN 'Category 3'
	--CASE WHEN PRODUCTYPE = 'RXO SPEND ANALYTICS' THEN 
	 WHEN PRODUCTTYPE = 'MRXTS – SUPPLYLOGIX' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'COVER MY MEDS' THEN 'Category 2'
	 WHEN PRODUCTTYPE = 'MCKESSON MEDICAL SURGICAL(MMS)' THEN 'Category 1'
	END AS CATEGORY, 
	FISCALQUARTER,
	CASE WHEN FISCALQUARTER = 'QUARTER 1 2026' THEN '2026, QUARTER 1'
	WHEN FISCALQUARTER = 'QUARTER 2 2026' THEN '2026, QUARTER 2'
	WHEN FISCALQUARTER = 'QUARTER 3 2026' THEN '2026, QUARTER 3'
    WHEN FISCALQUARTER = 'QUARTER 4 2026' THEN '2026, QUARTER 4'
	ELSE 'OLD' END AS QUARTER, 
		DEALCREDIT, 
	CASE WHEN CATEGORY = 'Category 1' THEN 60  
		WHEN CATEGORY = 'Category 2' THEN 30 
		WHEN CATEGORY = 'Category 3' THEN 10  
		END AS CATEGORY_POINTS, 
	DEALCREDIT * CATEGORY_POINTS AS VAS_POINTS
FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADDED_SOLUTIONS b
INNER JOIN just_roles a ON b.payeeid = a.payeeid
WHERE CONTAINS(FISCALQUARTER, '2026')
)

           
 ---------------------final pull 

--VAS 
SELECT * FROM VAS
